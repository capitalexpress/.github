name: "Deploy Go Application"
on:
 workflow_dispatch:
    inputs:
      DOPPLER_TARGET_PROJECT:
        description: 'Doppler Target Project'
        required: true
        type: string
        default: 'test-deploy'
      DOPPLER_TARGET_CONFIG:
        description: 'Doppler Target Config'
        required: true
        type: string
        default: 'dev'
      APP_NAME:
        description: 'Application Name'
        required: false
        type: string
        default: 'test-deploy'
      NAMESPACE:
        description: 'Kubernetes Namespace'
        required: false
        type: string
        default: 'dev'
      AWS_REGION:
        description: 'AWS Region'
        required: false
        type: string
        default: 'sa-east-1'
      EKS_CLUSTER_NAME:
        description: 'EKS Cluster Name'
        required: true
        type: string
        default: 'test-cluster'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Pre Deploy Checks
        uses: ../actions/pre-deploy
  build:
    runs-on: ubuntu-latest
    needs: test
    environment: stage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate Version
        id: version
        run: |
          IMAGE_VERSION=$(cat version.txt)
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_OUTPUT
      - name: Run Build Action
        uses: ../actions/build
        id: build_image
        with:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          ENV: "stage"
          IMAGE_VERSION: ${{ steps.version.outputs.IMAGE_VERSION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
    outputs:
      IMAGE_VERSION_TAG: "${{ steps.build_image.outputs.IMAGE_VERSION_TAG }}"
      IMAGE_REGISTRY: "${{ steps.build_image.outputs.IMAGE_REGISTRY }}"
      IMAGE_HASH_TAG: "${{ steps.build_image.outputs.IMAGE_HASH_TAG }}"
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: 'Fetch secrets from Doppler'
        uses: dopplerhq/secrets-fetch-action@v1.3.0
        id: doppler
        with:
            doppler-token: ${{ secrets.DOPPLER_TOKEN }}
            doppler-project: ${{ inputs.DOPPLER_TARGET_PROJECT  }}
            doppler-config: ${{ inputs.DOPPLER_TARGET_CONFIG  }}
      - name: save Doppler outputs to a .env 
        run: |
          echo '${{ toJSON(steps.doppler.outputs) }}' | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
      - name: Export .env to Helm args
        id: export-env
        run: |
          set -e
          ARGS=""
          while IFS='=' read -r key value; do
            # skip empty lines or comments
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            key=$(echo $key | sed 's/^export //')   # strip "export " if present
            # escape dots in key for Helm path
            safe_key=$(echo $key | sed 's/\./\\./g')
            # wrap value in quotes
            ARGS="$ARGS --set secrets.$safe_key=\"$value\""
          done < .env
          echo "HELM_ARGS=$ARGS" >> $GITHUB_ENV
      - name: Setup helm
        uses: azure/setup-helm@v4.3.0
        id: setup-helm
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ inputs.EKS_CLUSTER_NAME }} --region ${{ inputs.AWS_REGION }}
      - name: Config Helm chart
        run: |
            helm upgrade ${{ inputs.APP_NAME }} ./kubernetes --install --namespace ${{ inputs.NAMESPACE }} \
             $HELM_ARGS \
             --set image.tag=${{ needs.build.outputs.IMAGE_HASH_TAG }} \
             --set image.repository='${{ needs.build.outputs.IMAGE_REGISTRY }}/${{secrets.ECR_REPOSITORY}}' \
             --set nameOverride=${{ inputs.APP_NAME }} \

